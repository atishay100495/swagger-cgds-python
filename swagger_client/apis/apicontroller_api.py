# coding: utf-8

"""
ApicontrollerApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ApicontrollerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_cancer_types(self, **kwargs):
        """
        Get cancer types with meta data
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_cancer_types(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] cancer_type_ids: List of cancer type identifiers (example: cll,brca,coad). Unrecognized ids are silently ignored. Empty string returns all.
        :return: list[DBCancerType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cancer_type_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cancer_types" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/cancertypes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'cancer_type_ids' in params:
            query_params['cancer_type_ids'] = params['cancer_type_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBCancerType]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_cancer_types1(self, **kwargs):
        """
        Get cancer types with meta data
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_cancer_types1(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] cancer_type_ids: List of cancer type identifiers (example: cll,brca,coad). Unrecognized ids are silently ignored. Empty string returns all.
        :return: list[DBCancerType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cancer_type_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cancer_types1" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/cancertypes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'cancer_type_ids' in params:
            query_params['cancer_type_ids'] = params['cancer_type_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBCancerType]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_genes(self, **kwargs):
        """
        Get gene meta data by hugo gene symbol lookup
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_genes(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] hugo_gene_symbols: List of hugo gene symbols. Unrecognized genes are silently ignored. Empty string returns all genes.
        :return: list[DBGene]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hugo_gene_symbols']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genes" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/genes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'hugo_gene_symbols' in params:
            query_params['hugo_gene_symbols'] = params['hugo_gene_symbols']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBGene]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_genes1(self, **kwargs):
        """
        Get gene meta data by hugo gene symbol lookup
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_genes1(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] hugo_gene_symbols: List of hugo gene symbols. Unrecognized genes are silently ignored. Empty string returns all genes.
        :return: list[DBGene]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hugo_gene_symbols']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genes1" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/genes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'hugo_gene_symbols' in params:
            query_params['hugo_gene_symbols'] = params['hugo_gene_symbols']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBGene]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_genetic_profile_data(self, genetic_profile_ids, genes, **kwargs):
        """
        Get genetic profile data across samples for given genes, and filtered by sample id or sample list id
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_genetic_profile_data(genetic_profile_ids, genes, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] genetic_profile_ids: List of genetic_profile_ids such as those returned by /api/geneticprofiles. (example: brca_tcga_pub_mutations). Unrecognized genetic profile ids are silently ignored. Profile data is only returned for matching ids. (required)
        :param list[str] genes: List of hugo gene symbols. (example: AKT1,CASP8,TGFBR1) Unrecognized gene ids are silently ignored. Profile data is only returned for matching genes. (required)
        :param list[str] sample_ids: List of sample identifiers such as those returned by /api/samples. Empty string returns all. Must be empty to query by sample list ids.
        :param str sample_list_id: A single sample list ids such as those returned by /api/samplelists. (example: brca_tcga_idc,brca_tcga_lobular). Empty string returns all. If sample_ids argument was provided, this argument will be ignored.
        :return: list[DBProfileData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['genetic_profile_ids', 'genes', 'sample_ids', 'sample_list_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genetic_profile_data" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'genetic_profile_ids' is set
        if ('genetic_profile_ids' not in params) or (params['genetic_profile_ids'] is None):
            raise ValueError("Missing the required parameter `genetic_profile_ids` when calling `get_genetic_profile_data`")
        # verify the required parameter 'genes' is set
        if ('genes' not in params) or (params['genes'] is None):
            raise ValueError("Missing the required parameter `genes` when calling `get_genetic_profile_data`")

        resource_path = '/api/geneticprofiledata'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'genetic_profile_ids' in params:
            query_params['genetic_profile_ids'] = params['genetic_profile_ids']
        if 'genes' in params:
            query_params['genes'] = params['genes']
        if 'sample_ids' in params:
            query_params['sample_ids'] = params['sample_ids']
        if 'sample_list_id' in params:
            query_params['sample_list_id'] = params['sample_list_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBProfileData]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_genetic_profile_data1(self, genetic_profile_ids, genes, **kwargs):
        """
        Get genetic profile data across samples for given genes, and filtered by sample id or sample list id
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_genetic_profile_data1(genetic_profile_ids, genes, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] genetic_profile_ids: List of genetic_profile_ids such as those returned by /api/geneticprofiles. (example: brca_tcga_pub_mutations). Unrecognized genetic profile ids are silently ignored. Profile data is only returned for matching ids. (required)
        :param list[str] genes: List of hugo gene symbols. (example: AKT1,CASP8,TGFBR1) Unrecognized gene ids are silently ignored. Profile data is only returned for matching genes. (required)
        :param list[str] sample_ids: List of sample identifiers such as those returned by /api/samples. Empty string returns all. Must be empty to query by sample list ids.
        :param str sample_list_id: A single sample list ids such as those returned by /api/samplelists. (example: brca_tcga_idc,brca_tcga_lobular). Empty string returns all. If sample_ids argument was provided, this argument will be ignored.
        :return: list[DBProfileData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['genetic_profile_ids', 'genes', 'sample_ids', 'sample_list_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genetic_profile_data1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'genetic_profile_ids' is set
        if ('genetic_profile_ids' not in params) or (params['genetic_profile_ids'] is None):
            raise ValueError("Missing the required parameter `genetic_profile_ids` when calling `get_genetic_profile_data1`")
        # verify the required parameter 'genes' is set
        if ('genes' not in params) or (params['genes'] is None):
            raise ValueError("Missing the required parameter `genes` when calling `get_genetic_profile_data1`")

        resource_path = '/api/geneticprofiledata'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'genetic_profile_ids' in params:
            query_params['genetic_profile_ids'] = params['genetic_profile_ids']
        if 'genes' in params:
            query_params['genes'] = params['genes']
        if 'sample_ids' in params:
            query_params['sample_ids'] = params['sample_ids']
        if 'sample_list_id' in params:
            query_params['sample_list_id'] = params['sample_list_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBProfileData]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_genetic_profiles(self, **kwargs):
        """
        Get list of genetic profile identifiers by study
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_genetic_profiles(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga). Must be empty to query by genetic profile ids (across all studies).
        :param list[str] genetic_profile_ids: List of genetic_profile_ids. (example: brca_tcga_pub_mutations). Empty string returns all genetic profiles. If study_id argument was provided, this argument will be ignored.
        :return: list[DBGeneticProfile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'genetic_profile_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genetic_profiles" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/geneticprofiles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'genetic_profile_ids' in params:
            query_params['genetic_profile_ids'] = params['genetic_profile_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBGeneticProfile]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_genetic_profiles1(self, **kwargs):
        """
        Get list of genetic profile identifiers by study
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_genetic_profiles1(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga). Must be empty to query by genetic profile ids (across all studies).
        :param list[str] genetic_profile_ids: List of genetic_profile_ids. (example: brca_tcga_pub_mutations). Empty string returns all genetic profiles. If study_id argument was provided, this argument will be ignored.
        :return: list[DBGeneticProfile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'genetic_profile_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genetic_profiles1" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/geneticprofiles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'genetic_profile_ids' in params:
            query_params['genetic_profile_ids'] = params['genetic_profile_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBGeneticProfile]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_patient_clinical_attributes(self, **kwargs):
        """
        Get clinical attribute identifiers, filtered by patient
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_patient_clinical_attributes(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga). Empty string returns clinical attributes across all studies.
        :param list[str] patient_ids: List of patient_ids. If provided, returned clinical attributes will be those which appear in any listed patient. Empty string returns clinical attributes across all patients.
        :return: list[DBClinicalField]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'patient_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_patient_clinical_attributes" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/clinicalattributes/patients'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'patient_ids' in params:
            query_params['patient_ids'] = params['patient_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBClinicalField]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_patient_clinical_attributes1(self, **kwargs):
        """
        Get clinical attribute identifiers, filtered by patient
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_patient_clinical_attributes1(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga). Empty string returns clinical attributes across all studies.
        :param list[str] patient_ids: List of patient_ids. If provided, returned clinical attributes will be those which appear in any listed patient. Empty string returns clinical attributes across all patients.
        :return: list[DBClinicalField]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'patient_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_patient_clinical_attributes1" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/clinicalattributes/patients'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'patient_ids' in params:
            query_params['patient_ids'] = params['patient_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBClinicalField]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_patient_clinical_data(self, study_id, attribute_ids, **kwargs):
        """
        Get clinical data records filtered by patient ids
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_patient_clinical_data(study_id, attribute_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga) (required)
        :param list[str] attribute_ids: List of attribute ids, such as those returned by /api/clinicalattributes/patients. (example: PATIENT_ID,DFS_STATUS) (required)
        :param list[str] patient_ids: List of patient identifiers such as those returned by /api/patients. Unrecognized ids are silently ignored. Empty string returns all.
        :return: list[DBClinicalPatientData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'attribute_ids', 'patient_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_patient_clinical_data" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'study_id' is set
        if ('study_id' not in params) or (params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `get_patient_clinical_data`")
        # verify the required parameter 'attribute_ids' is set
        if ('attribute_ids' not in params) or (params['attribute_ids'] is None):
            raise ValueError("Missing the required parameter `attribute_ids` when calling `get_patient_clinical_data`")

        resource_path = '/api/clinicaldata/patients'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'attribute_ids' in params:
            query_params['attribute_ids'] = params['attribute_ids']
        if 'patient_ids' in params:
            query_params['patient_ids'] = params['patient_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBClinicalPatientData]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_patient_clinical_data1(self, study_id, attribute_ids, **kwargs):
        """
        Get clinical data records filtered by patient ids
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_patient_clinical_data1(study_id, attribute_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga) (required)
        :param list[str] attribute_ids: List of attribute ids, such as those returned by /api/clinicalattributes/patients. (example: PATIENT_ID,DFS_STATUS) (required)
        :param list[str] patient_ids: List of patient identifiers such as those returned by /api/patients. Unrecognized ids are silently ignored. Empty string returns all.
        :return: list[DBClinicalPatientData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'attribute_ids', 'patient_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_patient_clinical_data1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'study_id' is set
        if ('study_id' not in params) or (params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `get_patient_clinical_data1`")
        # verify the required parameter 'attribute_ids' is set
        if ('attribute_ids' not in params) or (params['attribute_ids'] is None):
            raise ValueError("Missing the required parameter `attribute_ids` when calling `get_patient_clinical_data1`")

        resource_path = '/api/clinicaldata/patients'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'attribute_ids' in params:
            query_params['attribute_ids'] = params['attribute_ids']
        if 'patient_ids' in params:
            query_params['patient_ids'] = params['patient_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBClinicalPatientData]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_patients(self, study_id, **kwargs):
        """
        Get patient id list by study or by sample id
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_patients(study_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga) (required)
        :param list[str] patient_ids: List of patient ids such as those returned by /api/patients. Empty string returns all. Must be empty to query by sample ids.
        :param list[str] sample_ids: List of sample identifiers. Empty string returns all. If patient_ids argument was provided, this argument will be ignored.
        :return: list[DBPatient]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'patient_ids', 'sample_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_patients" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'study_id' is set
        if ('study_id' not in params) or (params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `get_patients`")

        resource_path = '/api/patients'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'patient_ids' in params:
            query_params['patient_ids'] = params['patient_ids']
        if 'sample_ids' in params:
            query_params['sample_ids'] = params['sample_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBPatient]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_patients1(self, study_id, **kwargs):
        """
        Get patient id list by study or by sample id
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_patients1(study_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga) (required)
        :param list[str] patient_ids: List of patient ids such as those returned by /api/patients. Empty string returns all. Must be empty to query by sample ids.
        :param list[str] sample_ids: List of sample identifiers. Empty string returns all. If patient_ids argument was provided, this argument will be ignored.
        :return: list[DBPatient]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'patient_ids', 'sample_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_patients1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'study_id' is set
        if ('study_id' not in params) or (params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `get_patients1`")

        resource_path = '/api/patients'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'patient_ids' in params:
            query_params['patient_ids'] = params['patient_ids']
        if 'sample_ids' in params:
            query_params['sample_ids'] = params['sample_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBPatient]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sample_clinical_attributes(self, **kwargs):
        """
        Get clinical attribute identifiers, filtered by sample
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sample_clinical_attributes(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga). Empty string returns clinical attributes across all studies.
        :param list[str] sample_ids: List of sample_ids. If provided, returned clinical attributes will be those which appear in any listed sample. Empty string returns clinical attributes across all samples.
        :return: list[DBClinicalField]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'sample_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sample_clinical_attributes" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/clinicalattributes/samples'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'sample_ids' in params:
            query_params['sample_ids'] = params['sample_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBClinicalField]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sample_clinical_attributes1(self, **kwargs):
        """
        Get clinical attribute identifiers, filtered by sample
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sample_clinical_attributes1(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga). Empty string returns clinical attributes across all studies.
        :param list[str] sample_ids: List of sample_ids. If provided, returned clinical attributes will be those which appear in any listed sample. Empty string returns clinical attributes across all samples.
        :return: list[DBClinicalField]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'sample_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sample_clinical_attributes1" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/clinicalattributes/samples'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'sample_ids' in params:
            query_params['sample_ids'] = params['sample_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBClinicalField]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sample_clinical_data(self, study_id, attribute_ids, **kwargs):
        """
        Get clinical data records, filtered by sample ids
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sample_clinical_data(study_id, attribute_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga) (required)
        :param list[str] attribute_ids: List of attribute ids, such as those returned by /api/clinicalattributes/samples. (example: SAMPLE_TYPE,IS_FFPE) (required)
        :param list[str] sample_ids: List of sample identifiers. Unrecognized ids are silently ignored. Empty string returns all.
        :return: list[DBClinicalSampleData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'attribute_ids', 'sample_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sample_clinical_data" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'study_id' is set
        if ('study_id' not in params) or (params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `get_sample_clinical_data`")
        # verify the required parameter 'attribute_ids' is set
        if ('attribute_ids' not in params) or (params['attribute_ids'] is None):
            raise ValueError("Missing the required parameter `attribute_ids` when calling `get_sample_clinical_data`")

        resource_path = '/api/clinicaldata/samples'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'attribute_ids' in params:
            query_params['attribute_ids'] = params['attribute_ids']
        if 'sample_ids' in params:
            query_params['sample_ids'] = params['sample_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBClinicalSampleData]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sample_clinical_data1(self, study_id, attribute_ids, **kwargs):
        """
        Get clinical data records, filtered by sample ids
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sample_clinical_data1(study_id, attribute_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga) (required)
        :param list[str] attribute_ids: List of attribute ids, such as those returned by /api/clinicalattributes/samples. (example: SAMPLE_TYPE,IS_FFPE) (required)
        :param list[str] sample_ids: List of sample identifiers. Unrecognized ids are silently ignored. Empty string returns all.
        :return: list[DBClinicalSampleData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'attribute_ids', 'sample_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sample_clinical_data1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'study_id' is set
        if ('study_id' not in params) or (params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `get_sample_clinical_data1`")
        # verify the required parameter 'attribute_ids' is set
        if ('attribute_ids' not in params) or (params['attribute_ids'] is None):
            raise ValueError("Missing the required parameter `attribute_ids` when calling `get_sample_clinical_data1`")

        resource_path = '/api/clinicaldata/samples'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'attribute_ids' in params:
            query_params['attribute_ids'] = params['attribute_ids']
        if 'sample_ids' in params:
            query_params['sample_ids'] = params['sample_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBClinicalSampleData]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sample_lists(self, **kwargs):
        """
        Get list of sample lists (list name and sample id list) by study
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sample_lists(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga). Must be empty to query by sample list ids (across all studies).
        :param list[str] sample_list_ids: List of sample list ids. (example: brca_tcga_idc,brca_tcga_lobular). Empty string returns all genetic profiles. If study_id argument was provided, this argument will be ignored.
        :return: list[DBSampleList]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'sample_list_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sample_lists" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/samplelists'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'sample_list_ids' in params:
            query_params['sample_list_ids'] = params['sample_list_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBSampleList]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sample_lists1(self, **kwargs):
        """
        Get list of sample lists (list name and sample id list) by study
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sample_lists1(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga). Must be empty to query by sample list ids (across all studies).
        :param list[str] sample_list_ids: List of sample list ids. (example: brca_tcga_idc,brca_tcga_lobular). Empty string returns all genetic profiles. If study_id argument was provided, this argument will be ignored.
        :return: list[DBSampleList]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'sample_list_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sample_lists1" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/samplelists'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'sample_list_ids' in params:
            query_params['sample_list_ids'] = params['sample_list_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBSampleList]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_samples(self, study_id, **kwargs):
        """
        Get list of samples ids with meta data by study, filtered by sample ids or patient ids
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_samples(study_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga) (required)
        :param list[str] sample_ids: List of sample identifiers. Unrecognized ids are silently ignored. Empty string returns all. Must be empty to query by patient_ids.
        :param list[str] patient_ids: List of patient identifiers such as those returned by /api/patients. Unrecognized ids are silently ignored. Empty string returns all. If sample_ids argument was provided, this arument will be ignored.
        :return: list[DBSample]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'sample_ids', 'patient_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_samples" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'study_id' is set
        if ('study_id' not in params) or (params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `get_samples`")

        resource_path = '/api/samples'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'sample_ids' in params:
            query_params['sample_ids'] = params['sample_ids']
        if 'patient_ids' in params:
            query_params['patient_ids'] = params['patient_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBSample]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_samples1(self, study_id, **kwargs):
        """
        Get list of samples ids with meta data by study, filtered by sample ids or patient ids
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_samples1(study_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: A single study id, such as those returned by /api/studies. (example: brca_tcga) (required)
        :param list[str] sample_ids: List of sample identifiers. Unrecognized ids are silently ignored. Empty string returns all. Must be empty to query by patient_ids.
        :param list[str] patient_ids: List of patient identifiers such as those returned by /api/patients. Unrecognized ids are silently ignored. Empty string returns all. If sample_ids argument was provided, this arument will be ignored.
        :return: list[DBSample]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'sample_ids', 'patient_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_samples1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'study_id' is set
        if ('study_id' not in params) or (params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `get_samples1`")

        resource_path = '/api/samples'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_id' in params:
            query_params['study_id'] = params['study_id']
        if 'sample_ids' in params:
            query_params['sample_ids'] = params['sample_ids']
        if 'patient_ids' in params:
            query_params['patient_ids'] = params['patient_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBSample]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_studies(self, **kwargs):
        """
        Get studies
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_studies(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] study_ids: List of study_ids. Unrecognized ids are silently ignored. Empty string returns all.
        :return: list[DBStudy]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_studies" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/studies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_ids' in params:
            query_params['study_ids'] = params['study_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBStudy]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_studies1(self, **kwargs):
        """
        Get studies
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_studies1(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] study_ids: List of study_ids. Unrecognized ids are silently ignored. Empty string returns all.
        :return: list[DBStudy]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_ids']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_studies1" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/studies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'study_ids' in params:
            query_params['study_ids'] = params['study_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DBStudy]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
