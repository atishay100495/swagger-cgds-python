# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DBProfileData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DBProfileData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'entrez_gene_id': 'str',
            'genetic_profile_id': 'str',
            'hugo_gene_symbol': 'str',
            'sample_id': 'str',
            'sample_list_id': 'str',
            'study_id': 'str'
        }

        self.attribute_map = {
            'entrez_gene_id': 'entrez_gene_id',
            'genetic_profile_id': 'genetic_profile_id',
            'hugo_gene_symbol': 'hugo_gene_symbol',
            'sample_id': 'sample_id',
            'sample_list_id': 'sample_list_id',
            'study_id': 'study_id'
        }

        self._entrez_gene_id = None
        self._genetic_profile_id = None
        self._hugo_gene_symbol = None
        self._sample_id = None
        self._sample_list_id = None
        self._study_id = None

    @property
    def entrez_gene_id(self):
        """
        Gets the entrez_gene_id of this DBProfileData.


        :return: The entrez_gene_id of this DBProfileData.
        :rtype: str
        """
        return self._entrez_gene_id

    @entrez_gene_id.setter
    def entrez_gene_id(self, entrez_gene_id):
        """
        Sets the entrez_gene_id of this DBProfileData.


        :param entrez_gene_id: The entrez_gene_id of this DBProfileData.
        :type: str
        """
        self._entrez_gene_id = entrez_gene_id

    @property
    def genetic_profile_id(self):
        """
        Gets the genetic_profile_id of this DBProfileData.


        :return: The genetic_profile_id of this DBProfileData.
        :rtype: str
        """
        return self._genetic_profile_id

    @genetic_profile_id.setter
    def genetic_profile_id(self, genetic_profile_id):
        """
        Sets the genetic_profile_id of this DBProfileData.


        :param genetic_profile_id: The genetic_profile_id of this DBProfileData.
        :type: str
        """
        self._genetic_profile_id = genetic_profile_id

    @property
    def hugo_gene_symbol(self):
        """
        Gets the hugo_gene_symbol of this DBProfileData.


        :return: The hugo_gene_symbol of this DBProfileData.
        :rtype: str
        """
        return self._hugo_gene_symbol

    @hugo_gene_symbol.setter
    def hugo_gene_symbol(self, hugo_gene_symbol):
        """
        Sets the hugo_gene_symbol of this DBProfileData.


        :param hugo_gene_symbol: The hugo_gene_symbol of this DBProfileData.
        :type: str
        """
        self._hugo_gene_symbol = hugo_gene_symbol

    @property
    def sample_id(self):
        """
        Gets the sample_id of this DBProfileData.


        :return: The sample_id of this DBProfileData.
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """
        Sets the sample_id of this DBProfileData.


        :param sample_id: The sample_id of this DBProfileData.
        :type: str
        """
        self._sample_id = sample_id

    @property
    def sample_list_id(self):
        """
        Gets the sample_list_id of this DBProfileData.


        :return: The sample_list_id of this DBProfileData.
        :rtype: str
        """
        return self._sample_list_id

    @sample_list_id.setter
    def sample_list_id(self, sample_list_id):
        """
        Sets the sample_list_id of this DBProfileData.


        :param sample_list_id: The sample_list_id of this DBProfileData.
        :type: str
        """
        self._sample_list_id = sample_list_id

    @property
    def study_id(self):
        """
        Gets the study_id of this DBProfileData.


        :return: The study_id of this DBProfileData.
        :rtype: str
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """
        Sets the study_id of this DBProfileData.


        :param study_id: The study_id of this DBProfileData.
        :type: str
        """
        self._study_id = study_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

