# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DBGeneticProfile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DBGeneticProfile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'datatype': 'str',
            'description': 'str',
            'genetic_alteration_type': 'str',
            'id': 'str',
            'name': 'str',
            'show_profile_in_analysis_tab': 'str',
            'study_id': 'str'
        }

        self.attribute_map = {
            'datatype': 'datatype',
            'description': 'description',
            'genetic_alteration_type': 'genetic_alteration_type',
            'id': 'id',
            'name': 'name',
            'show_profile_in_analysis_tab': 'show_profile_in_analysis_tab',
            'study_id': 'study_id'
        }

        self._datatype = None
        self._description = None
        self._genetic_alteration_type = None
        self._id = None
        self._name = None
        self._show_profile_in_analysis_tab = None
        self._study_id = None

    @property
    def datatype(self):
        """
        Gets the datatype of this DBGeneticProfile.


        :return: The datatype of this DBGeneticProfile.
        :rtype: str
        """
        return self._datatype

    @datatype.setter
    def datatype(self, datatype):
        """
        Sets the datatype of this DBGeneticProfile.


        :param datatype: The datatype of this DBGeneticProfile.
        :type: str
        """
        self._datatype = datatype

    @property
    def description(self):
        """
        Gets the description of this DBGeneticProfile.


        :return: The description of this DBGeneticProfile.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DBGeneticProfile.


        :param description: The description of this DBGeneticProfile.
        :type: str
        """
        self._description = description

    @property
    def genetic_alteration_type(self):
        """
        Gets the genetic_alteration_type of this DBGeneticProfile.


        :return: The genetic_alteration_type of this DBGeneticProfile.
        :rtype: str
        """
        return self._genetic_alteration_type

    @genetic_alteration_type.setter
    def genetic_alteration_type(self, genetic_alteration_type):
        """
        Sets the genetic_alteration_type of this DBGeneticProfile.


        :param genetic_alteration_type: The genetic_alteration_type of this DBGeneticProfile.
        :type: str
        """
        self._genetic_alteration_type = genetic_alteration_type

    @property
    def id(self):
        """
        Gets the id of this DBGeneticProfile.


        :return: The id of this DBGeneticProfile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DBGeneticProfile.


        :param id: The id of this DBGeneticProfile.
        :type: str
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this DBGeneticProfile.


        :return: The name of this DBGeneticProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DBGeneticProfile.


        :param name: The name of this DBGeneticProfile.
        :type: str
        """
        self._name = name

    @property
    def show_profile_in_analysis_tab(self):
        """
        Gets the show_profile_in_analysis_tab of this DBGeneticProfile.


        :return: The show_profile_in_analysis_tab of this DBGeneticProfile.
        :rtype: str
        """
        return self._show_profile_in_analysis_tab

    @show_profile_in_analysis_tab.setter
    def show_profile_in_analysis_tab(self, show_profile_in_analysis_tab):
        """
        Sets the show_profile_in_analysis_tab of this DBGeneticProfile.


        :param show_profile_in_analysis_tab: The show_profile_in_analysis_tab of this DBGeneticProfile.
        :type: str
        """
        self._show_profile_in_analysis_tab = show_profile_in_analysis_tab

    @property
    def study_id(self):
        """
        Gets the study_id of this DBGeneticProfile.


        :return: The study_id of this DBGeneticProfile.
        :rtype: str
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """
        Sets the study_id of this DBGeneticProfile.


        :param study_id: The study_id of this DBGeneticProfile.
        :type: str
        """
        self._study_id = study_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

